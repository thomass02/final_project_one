{"ast":null,"code":"import Axios from \"axios\";\nimport { DEVICE_LIST_REQUEST, DEVICE_LIST_SUCCESS, PRODUCT_DETAILS_FAIL, PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_LIST_FAIL, PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS } from \"../constants/ProductConstants\";\n/* Actions */\n\n/* build dropdown menu for user device selection */\n\nexport const selectDevice = () => async dispatch => {\n  dispatch({\n    type: DEVICE_LIST_REQUEST\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.get('/api/deviceType');\n    dispatch({\n      type: DEVICE_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: DEVICE_LIST_FAIl,\n      payload: err.message\n    });\n  }\n};\n/* list products from backend */\n\nexport const listProducts = () => async dispatch => {\n  dispatch({\n    type: PRODUCT_LIST_REQUEST\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.get('/api/products');\n    dispatch({\n      type: PRODUCT_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: PRODUCT_LIST_FAIL,\n      payload: err.message\n    });\n  }\n};\n/* get product details from backend */\n\nexport const detailsProduct = productId => async dispatch => {\n  dispatch({\n    type: PRODUCT_DETAILS_REQUEST,\n    payload: productId\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.get(`/api/products/${productId}`);\n    dispatch({\n      type: PRODUCT_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: PRODUCT_DETAILS_FAIL,\n      payload:\n      /*  backend failure */\n      err.response && err.response.data.message\n      /* render the error message from backend */\n      ? err.response.data.message\n      /* otherwise, diplay the generic error message */\n      : err.message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/smoke/AndroidStudioProjects/New_Project/EZTechWebsite/frontend/src/actions/ProductActions.js"],"names":["Axios","DEVICE_LIST_REQUEST","DEVICE_LIST_SUCCESS","PRODUCT_DETAILS_FAIL","PRODUCT_DETAILS_REQUEST","PRODUCT_DETAILS_SUCCESS","PRODUCT_LIST_FAIL","PRODUCT_LIST_REQUEST","PRODUCT_LIST_SUCCESS","selectDevice","dispatch","type","data","get","payload","err","DEVICE_LIST_FAIl","message","listProducts","detailsProduct","productId","response"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,mBAAT,EAA8BC,mBAA9B,EAAmDC,oBAAnD,EAAyEC,uBAAzE,EAAkGC,uBAAlG,EAA2HC,iBAA3H,EAA8IC,oBAA9I,EAAoKC,oBAApK,QAAgM,+BAAhM;AAEA;;AAEA;;AACA,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAOC,QAAP,IAAmB;AAEjDA,EAAAA,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAAEV;AAAP,GAAD,CAAR;;AAEA,MAAI;AAEF,UAAM;AAAEW,MAAAA;AAAF,QAAW,MAAMZ,KAAK,CAACa,GAAN,CAAU,iBAAV,CAAvB;AAEAH,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAET,mBAAR;AAA6BY,MAAAA,OAAO,EAAEF;AAAtC,KAAD,CAAR;AAED,GAND,CAQA,OAAMG,GAAN,EAAW;AAETL,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEK,gBAAR;AAA0BF,MAAAA,OAAO,EAAEC,GAAG,CAACE;AAAvC,KAAD,CAAR;AAED;AACJ,CAjBM;AAoBP;;AACA,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAOR,QAAP,IAAoB;AAElDA,EAAAA,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAAEJ;AAAP,GAAD,CAAR;;AAEA,MAAI;AAEF,UAAM;AAAEK,MAAAA;AAAF,QAAW,MAAMZ,KAAK,CAACa,GAAN,CAAU,eAAV,CAAvB;AAEAH,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEH,oBAAR;AAA8BM,MAAAA,OAAO,EAAEF;AAAvC,KAAD,CAAR;AAED,GAND,CAQA,OAAMG,GAAN,EAAW;AAETL,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEL,iBAAR;AAA2BQ,MAAAA,OAAO,EAAEC,GAAG,CAACE;AAAxC,KAAD,CAAR;AAED;AAEF,CAlBI;AAqBL;;AACA,OAAO,MAAME,cAAc,GAAIC,SAAD,IAAe,MAAOV,QAAP,IAAoB;AAG/DA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEP,uBAAR;AAAiCU,IAAAA,OAAO,EAAEM;AAA1C,GAAD,CAAR;;AAEA,MAAI;AAEF,UAAM;AAAER,MAAAA;AAAF,QAAW,MAAMZ,KAAK,CAACa,GAAN,CAAW,iBAAgBO,SAAU,EAArC,CAAvB;AAEAV,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEN,uBAAR;AAAiCS,MAAAA,OAAO,EAAEF;AAA1C,KAAD,CAAR;AAED,GAND,CAOA,OAAMG,GAAN,EAAW;AAETL,IAAAA,QAAQ,CAAC;AAEPC,MAAAA,IAAI,EAAER,oBAFC;AAEoBW,MAAAA,OAAO;AAE9B;AACAC,MAAAA,GAAG,CAACM,QAAJ,IAAgBN,GAAG,CAACM,QAAJ,CAAaT,IAAb,CAAkBK;AAElC;AAFA,QAGEF,GAAG,CAACM,QAAJ,CAAaT,IAAb,CAAkBK;AAEpB;AALA,QAMEF,GAAG,CAACE;AAXH,KAAD,CAAR;AAaD;AACF,CA5BM","sourcesContent":["import Axios from \"axios\";\nimport { DEVICE_LIST_REQUEST, DEVICE_LIST_SUCCESS, PRODUCT_DETAILS_FAIL, PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_LIST_FAIL, PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS } from \"../constants/ProductConstants\"\n\n/* Actions */\n\n/* build dropdown menu for user device selection */\nexport const selectDevice = () => async (dispatch) =>{\n\n    dispatch({type: DEVICE_LIST_REQUEST,});\n\n    try {\n\n      const { data } = await Axios.get('/api/deviceType');\n\n      dispatch({ type: DEVICE_LIST_SUCCESS, payload: data });\n\n    } \n    \n    catch(err) {\n\n      dispatch({ type: DEVICE_LIST_FAIl, payload: err.message });\n\n    }\n};\n\n\n/* list products from backend */\nexport const listProducts = () => async (dispatch) => {\n\n    dispatch({type: PRODUCT_LIST_REQUEST,});\n\n    try {\n\n      const { data } = await Axios.get('/api/products');\n\n      dispatch({ type: PRODUCT_LIST_SUCCESS, payload: data });\n\n    } \n    \n    catch(err) {\n\n      dispatch({ type: PRODUCT_LIST_FAIL, payload: err.message });\n\n    }\n\n  };\n  \n\n  /* get product details from backend */\n  export const detailsProduct = (productId) => async (dispatch) => {\n\n\n    dispatch({ type: PRODUCT_DETAILS_REQUEST, payload: productId });\n\n    try {\n\n      const { data } = await Axios.get(`/api/products/${productId}`);\n\n      dispatch({ type: PRODUCT_DETAILS_SUCCESS, payload: data });\n\n    } \n    catch(err) {\n\n      dispatch({\n\n        type: PRODUCT_DETAILS_FAIL,payload: \n\n            /*  backend failure */\n            err.response && err.response.data.message\n          \n            /* render the error message from backend */\n            ? err.response.data.message\n\n            /* otherwise, diplay the generic error message */\n            : err.message,\n      });\n    }\n  };"]},"metadata":{},"sourceType":"module"}