{"ast":null,"code":"var _jsxFileName = \"/Users/smoke/AndroidStudioProjects/New_Project/EZTechWebsite/frontend/src/componets/Test.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Test() {\n  _s();\n\n  const [loading, setLoading] = React.useState(true);\n  const [data, setData] = React.useState([]);\n  const [value, setValue] = React.useState(\"Device Selection\");\n  React.useEffect(() => {\n    let unmounted = false;\n\n    async function fetchData() {\n      const response = await fetch(\"/api/deviceType\");\n      const data = await response.json();\n\n      if (!unmounted) {\n        setData(data.map(_ref => {\n          let {\n            name\n          } = _ref;\n          return {\n            label: name,\n            value: name\n          };\n        }));\n        setLoading(false);\n      }\n    }\n\n    ;\n    fetchData();\n    return () => {\n      unmounted = true;\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row top\",\n    children: /*#__PURE__*/_jsxDEV(\"select\", {\n      disabled: loading,\n      value: value,\n      onChange: e => setValue(e.currentTarget.value),\n      children: data.map(_ref2 => {\n        let {\n          label,\n          value\n        } = _ref2;\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: value,\n          children: label\n        }, value, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Test, \"GuW6ze+mUPF1QgRsqG7AVuhg6Ew=\");\n\n_c = Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["/Users/smoke/AndroidStudioProjects/New_Project/EZTechWebsite/frontend/src/componets/Test.js"],"names":["React","Test","loading","setLoading","useState","data","setData","value","setValue","useEffect","unmounted","fetchData","response","fetch","json","map","name","label","e","currentTarget"],"mappings":";;;AACA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,eAAe,SAASC,IAAT,GAAe;AAAA;;AAC1B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBH,KAAK,CAACI,QAAN,CAAe,IAAf,CAA9B;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,KAAK,CAACI,QAAN,CAAe,EAAf,CAAxB;AACA,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBR,KAAK,CAACI,QAAN,CAAe,kBAAf,CAA1B;AAIAJ,EAAAA,KAAK,CAACS,SAAN,CAAgB,MAAM;AAClB,QAAIC,SAAS,GAAG,KAAhB;;AAEA,mBAAeC,SAAf,GAA2B;AACzB,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAD,CAA5B;AAEA,YAAMR,IAAI,GAAG,MAAMO,QAAQ,CAACE,IAAT,EAAnB;;AACA,UAAG,CAACJ,SAAJ,EAAc;AAGZJ,QAAAA,OAAO,CAEHD,IAAI,CAACU,GAAL,CAAS;AAAA,cAAC;AAAEC,YAAAA;AAAF,WAAD;AAAA,iBAAe;AAACC,YAAAA,KAAK,EAACD,IAAP;AAAaT,YAAAA,KAAK,EAAES;AAApB,WAAf;AAAA,SAAT,CAFG,CAAP;AAKAb,QAAAA,UAAU,CAAC,KAAD,CAAV;AAED;AACF;;AAAA;AACDQ,IAAAA,SAAS;AACT,WAAO,MAAM;AAETD,MAAAA,SAAS,GAAG,IAAZ;AACH,KAHD;AAID,GAxBH,EAwBK,EAxBL;AA2BA,sBACA;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,2BACI;AACI,MAAA,QAAQ,EAAER,OADd;AAEI,MAAA,KAAK,EAAEK,KAFX;AAGI,MAAA,QAAQ,EAAGW,CAAD,IAAOV,QAAQ,CAACU,CAAC,CAACC,aAAF,CAAgBZ,KAAjB,CAH7B;AAAA,gBAMKF,IAAI,CAACU,GAAL,CAAS;AAAA,YAAC;AAAEE,UAAAA,KAAF;AAASV,UAAAA;AAAT,SAAD;AAAA,4BACN;AAAoB,UAAA,KAAK,EAAEA,KAA3B;AAAA,oBACCU;AADD,WAAaV,KAAb;AAAA;AAAA;AAAA;AAAA,gBADM;AAAA,OAAT;AANL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADA;AAgBH;;GAlDuBN,I;;KAAAA,I","sourcesContent":["\nimport React from \"react\";\n\nexport default function Test(){\n    const [loading, setLoading] = React.useState(true);\n    const [data, setData] = React.useState([]);\n    const [value, setValue] = React.useState(\"Device Selection\");\n\n\n\n    React.useEffect(() => {\n        let unmounted = false;\n\n        async function fetchData() {\n          const response = await fetch(\"/api/deviceType\");\n          \n          const data = await response.json();\n          if(!unmounted){\n\n\n            setData(\n\n                data.map(({ name }) => ({label:name, value: name}))\n            );\n\n            setLoading(false);\n\n          }\n        };\n        fetchData();\n        return () => {\n\n            unmounted = true;\n        };\n      }, []);\n\n\n    return(\n    <div className=\"row top\">\n        <select\n            disabled={loading}\n            value={value}\n            onChange={(e) => setValue(e.currentTarget.value)}\n        >\n\n            {data.map(({ label, value }) => (\n                <option key={value} value={value}>\n                {label}\n                </option>\n            ))}\n        </select>\n    </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}