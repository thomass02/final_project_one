{"ast":null,"code":"import Axios from \"axios\";\nimport { PRODUCT_DETAILS_FAIL, PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_LIST_FAIL, PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS } from \"../constants/ProductConstants\"; // /* Actions */\n// /* list products from backend */\n// export const listProducts = () => async (dispatch) => {\n//     dispatch({type: PRODUCT_LIST_REQUEST});\n//     try{\n//         const {data} = await Axios.get('/api/products');\n//         dispatch({type: PRODUCT_LIST_SUCCESS, payload:data});\n//     }\n//     catch(err){\n//         dispatch({type:PRODUCT_LIST_FAIL, payload:err.message});\n//     }\n// };\n// /* get product details from backend */\n// export const detailsProduct = (productId) => async (dispatch) => {\n//     dispatch({type: PRODUCT_DETAILS_REQUEST, payload: productId});\n//     try{\n//         const {data} = await Axios.get(`/api/products/${productId}`);\n//         dispatch({type: PRODUCT_DETAILS_SUCCESS, payload:data});\n//     }\n//     /* product lookup failure */\n//     catch(err){\n//         dispatch({type: PRODUCT_DETAILS_FAIL, payload: \n//             /*  backend failure */\n//             err.response && err.response.data.message \n//             /* render the error message from backend */\n//             ? err.resonse.data.message\n//             /* otherwise, diplay the generic error message */\n//             : err.message});\n//     }\n// };\n\nexport const listProducts = () => async dispatch => {\n  dispatch({\n    type: PRODUCT_LIST_REQUEST\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.get('/api/products');\n    dispatch({\n      type: PRODUCT_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_LIST_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const detailsProduct = productId => async dispatch => {\n  dispatch({\n    type: PRODUCT_DETAILS_REQUEST,\n    payload: productId\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.get(`/api/products/${productId}`);\n    dispatch({\n      type: PRODUCT_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/smoke/AndroidStudioProjects/New_Project/EZTechWebsite/frontend/src/actions/ProductActions.js"],"names":["Axios","PRODUCT_DETAILS_FAIL","PRODUCT_DETAILS_REQUEST","PRODUCT_DETAILS_SUCCESS","PRODUCT_LIST_FAIL","PRODUCT_LIST_REQUEST","PRODUCT_LIST_SUCCESS","listProducts","dispatch","type","data","get","payload","error","message","detailsProduct","productId","response"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,oBAAT,EAA+BC,uBAA/B,EAAwDC,uBAAxD,EAAiFC,iBAAjF,EAAoGC,oBAApG,EAA0HC,oBAA1H,QAAsJ,+BAAtJ,C,CAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAGA,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAClDA,EAAAA,QAAQ,CAAC;AACPC,IAAAA,IAAI,EAAEJ;AADC,GAAD,CAAR;;AAGA,MAAI;AACF,UAAM;AAAEK,MAAAA;AAAF,QAAW,MAAMV,KAAK,CAACW,GAAN,CAAU,eAAV,CAAvB;AACAH,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEH,oBAAR;AAA8BM,MAAAA,OAAO,EAAEF;AAAvC,KAAD,CAAR;AACD,GAHD,CAKA,OAAMG,KAAN,EAAa;AAEXL,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEL,iBAAR;AAA2BQ,MAAAA,OAAO,EAAEC,KAAK,CAACC;AAA1C,KAAD,CAAR;AAED;AACF,CAdI;AAgBL,OAAO,MAAMC,cAAc,GAAIC,SAAD,IAAe,MAAOR,QAAP,IAAoB;AAE/DA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEP,uBAAR;AAAiCU,IAAAA,OAAO,EAAEI;AAA1C,GAAD,CAAR;;AAEA,MAAI;AAEF,UAAM;AAAEN,MAAAA;AAAF,QAAW,MAAMV,KAAK,CAACW,GAAN,CAAW,iBAAgBK,SAAU,EAArC,CAAvB;AAEAR,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEN,uBAAR;AAAiCS,MAAAA,OAAO,EAAEF;AAA1C,KAAD,CAAR;AAED,GAND,CAOA,OAAMG,KAAN,EAAa;AAEXL,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAER,oBADC;AAEPW,MAAAA,OAAO,EACLC,KAAK,CAACI,QAAN,IAAkBJ,KAAK,CAACI,QAAN,CAAeP,IAAf,CAAoBI,OAAtC,GACID,KAAK,CAACI,QAAN,CAAeP,IAAf,CAAoBI,OADxB,GAEID,KAAK,CAACC;AALL,KAAD,CAAR;AAOD;AACF,CArBM","sourcesContent":["import Axios from \"axios\";\nimport { PRODUCT_DETAILS_FAIL, PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_LIST_FAIL, PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS } from \"../constants/ProductConstants\"\n\n// /* Actions */\n\n// /* list products from backend */\n// export const listProducts = () => async (dispatch) => {\n\n//     dispatch({type: PRODUCT_LIST_REQUEST});\n\n//     try{\n\n//         const {data} = await Axios.get('/api/products');\n//         dispatch({type: PRODUCT_LIST_SUCCESS, payload:data});\n\n//     }\n\n//     catch(err){\n\n//         dispatch({type:PRODUCT_LIST_FAIL, payload:err.message});\n//     }\n// };\n\n// /* get product details from backend */\n// export const detailsProduct = (productId) => async (dispatch) => {\n\n//     dispatch({type: PRODUCT_DETAILS_REQUEST, payload: productId});\n\n//     try{\n\n//         const {data} = await Axios.get(`/api/products/${productId}`);\n//         dispatch({type: PRODUCT_DETAILS_SUCCESS, payload:data});\n//     }\n\n//     /* product lookup failure */\n//     catch(err){\n\n//         dispatch({type: PRODUCT_DETAILS_FAIL, payload: \n            \n//             /*  backend failure */\n//             err.response && err.response.data.message \n            \n//             /* render the error message from backend */\n//             ? err.resonse.data.message\n            \n//             /* otherwise, diplay the generic error message */\n//             : err.message});\n//     }\n// };\n\n\nexport const listProducts = () => async (dispatch) => {\n    dispatch({\n      type: PRODUCT_LIST_REQUEST,\n    });\n    try {\n      const { data } = await Axios.get('/api/products');\n      dispatch({ type: PRODUCT_LIST_SUCCESS, payload: data });\n    } \n    \n    catch(error) {\n\n      dispatch({ type: PRODUCT_LIST_FAIL, payload: error.message });\n\n    }\n  };\n  \n  export const detailsProduct = (productId) => async (dispatch) => {\n\n    dispatch({ type: PRODUCT_DETAILS_REQUEST, payload: productId });\n\n    try {\n\n      const { data } = await Axios.get(`/api/products/${productId}`);\n\n      dispatch({ type: PRODUCT_DETAILS_SUCCESS, payload: data });\n\n    } \n    catch(error) {\n      \n      dispatch({\n        type: PRODUCT_DETAILS_FAIL,\n        payload:\n          error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message,\n      });\n    }\n  };"]},"metadata":{},"sourceType":"module"}