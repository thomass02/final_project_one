{"ast":null,"code":"// import data from \"./data\";\nimport { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { cartReducer } from './reducers/CartReducers';\nimport { productDetailsReducer, productDeviceReducer, productListReducer, selectedValuesReducer } from './reducers/ProductReducers';\nimport { userSigninReducer } from './reducers/userReducer';\nconst initialState = {\n  userSignin: {\n    /* check to see if items are existing in cart, if so, convert to array for processing */\n    userData: localStorage.getItem('userData') ? JSON.parse(localStorage.getItem('userData')) : null\n  },\n  cart: {\n    /* check to see if items are existing in cart, if so, convert to array for processing */\n    cartItems: localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : []\n  }\n};\n/* Get data through reducers dynamically - so we dont rely on static content */\n\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  // selectDevice: deviceDropdownReducer,\n  cart: cartReducer,\n  deviceList: productDeviceReducer,\n  selectedValues: selectedValuesReducer,\n  userSignin: userSigninReducer\n});\n/* allow chrome browser redux tools access to store */\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducer, initialState, composeEnhancer(applyMiddleware(thunk)));\nexport default store;","map":{"version":3,"sources":["/Users/smoke/AndroidStudioProjects/New_Project/EZTechWebsite/frontend/src/store.js"],"names":["applyMiddleware","combineReducers","compose","createStore","thunk","cartReducer","productDetailsReducer","productDeviceReducer","productListReducer","selectedValuesReducer","userSigninReducer","initialState","userSignin","userData","localStorage","getItem","JSON","parse","cart","cartItems","reducer","productList","productDetails","deviceList","selectedValues","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store"],"mappings":"AACA;AACA,SAAQA,eAAR,EAAyBC,eAAzB,EAA0CC,OAA1C,EAAmDC,WAAnD,QAAqE,OAArE;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,qBAAT,EAAgCC,oBAAhC,EAAsDC,kBAAtD,EAA0EC,qBAA1E,QAAsG,4BAAtG;AACA,SAASC,iBAAT,QAAkC,wBAAlC;AAEA,MAAMC,YAAY,GAAG;AAEjBC,EAAAA,UAAU,EAAC;AAEP;AACAC,IAAAA,QAAQ,EAAEC,YAAY,CAACC,OAAb,CAAqB,UAArB,IAAkCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAAlC,GAA+E;AAHlF,GAFM;AAQjBG,EAAAA,IAAI,EAAE;AAEF;AACAC,IAAAA,SAAS,EAAEL,YAAY,CAACC,OAAb,CAAqB,WAArB,IAAmCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAAnC,GAAiF;AAH1F;AARW,CAArB;AAgBA;;AACA,MAAMK,OAAO,GAAGnB,eAAe,CAAC;AAE5BoB,EAAAA,WAAW,EAAEb,kBAFe;AAG5Bc,EAAAA,cAAc,EAAEhB,qBAHY;AAI5B;AACAY,EAAAA,IAAI,EAAEb,WALsB;AAM5BkB,EAAAA,UAAU,EAAEhB,oBANgB;AAO5BiB,EAAAA,cAAc,EAAEf,qBAPY;AAQ5BG,EAAAA,UAAU,EAAEF;AARgB,CAAD,CAA/B;AAWA;;AACA,MAAMe,eAAe,GAAGC,MAAM,CAACC,oCAAP,IAA+CzB,OAAvE;AAEA,MAAM0B,KAAK,GAAGzB,WAAW,CAACiB,OAAD,EAAUT,YAAV,EAAwBc,eAAe,CAACzB,eAAe,CAACI,KAAD,CAAhB,CAAvC,CAAzB;AAEA,eAAewB,KAAf","sourcesContent":["\n// import data from \"./data\";\nimport {applyMiddleware, combineReducers, compose, createStore} from 'redux';\nimport thunk from 'redux-thunk';\nimport { cartReducer } from './reducers/CartReducers';\nimport { productDetailsReducer, productDeviceReducer, productListReducer, selectedValuesReducer} from './reducers/ProductReducers';\nimport { userSigninReducer } from './reducers/userReducer';\n\nconst initialState = {\n\n    userSignin:{\n        \n        /* check to see if items are existing in cart, if so, convert to array for processing */\n        userData: localStorage.getItem('userData')? JSON.parse(localStorage.getItem('userData')):null,\n    },\n\n    cart: {\n\n        /* check to see if items are existing in cart, if so, convert to array for processing */\n        cartItems: localStorage.getItem('cartItems')? JSON.parse(localStorage.getItem('cartItems')):[],\n    }\n\n};\n\n/* Get data through reducers dynamically - so we dont rely on static content */\nconst reducer = combineReducers({\n\n    productList: productListReducer,\n    productDetails: productDetailsReducer,\n    // selectDevice: deviceDropdownReducer,\n    cart: cartReducer,\n    deviceList: productDeviceReducer,\n    selectedValues: selectedValuesReducer,\n    userSignin: userSigninReducer,\n});\n\n/* allow chrome browser redux tools access to store */\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducer, initialState, composeEnhancer(applyMiddleware(thunk)));\n\nexport default store;\n\n\n"]},"metadata":{},"sourceType":"module"}