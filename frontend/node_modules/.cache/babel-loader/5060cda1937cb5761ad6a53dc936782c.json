{"ast":null,"code":"import axios from \"axios\";\nimport { DEVICE_LIST_FAIL, DEVICE_LIST_REQUEST, DEVICE_LIST_SUCCESS, PRODUCT_DETAILS_FAIL, PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_LIST_FAIL, PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS, SET_DROPDOWN_VALUES } from \"../constants/ProductConstants\";\n/* Actions */\n// this action sets the current selectct values\n\nexport const setCurrentSelectedValues = (e, data) => {\n  return {\n    type: SET_DROPDOWN_VALUES,\n    payload: data.value\n  };\n};\n/* get user slectable devices for drop down */\n\n/* get user slectable devices for drop down */\n\nexport const listDevices = () => async dispatch => {\n  dispatch({\n    type: DEVICE_LIST_REQUEST\n  });\n\n  try {\n    const {\n      data\n    } = await axios.get('/api/deviceType');\n    dispatch({\n      type: DEVICE_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: DEVICE_LIST_FAIL,\n      payload: err.message\n    });\n  }\n};\n/* list products from backend */\n\nexport const listProducts = () => async dispatch => {\n  dispatch({\n    type: PRODUCT_LIST_REQUEST\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.get('/api/products');\n    dispatch({\n      type: PRODUCT_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: PRODUCT_LIST_FAIL,\n      payload: err.message\n    });\n  }\n};\n/* get product details from backend */\n\nexport const detailsProduct = productId => async dispatch => {\n  dispatch({\n    type: PRODUCT_DETAILS_REQUEST,\n    payload: productId\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.get(`/api/products/${productId}`);\n    dispatch({\n      type: PRODUCT_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: PRODUCT_DETAILS_FAIL,\n      payload:\n      /*  backend failure */\n      err.response && err.response.data.message\n      /* render the error message from backend */\n      ? err.response.data.message\n      /* otherwise, diplay the generic error message */\n      : err.message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/smoke/AndroidStudioProjects/New_Project/EZTechWebsite/frontend/src/actions/ProductActions.js"],"names":["axios","DEVICE_LIST_FAIL","DEVICE_LIST_REQUEST","DEVICE_LIST_SUCCESS","PRODUCT_DETAILS_FAIL","PRODUCT_DETAILS_REQUEST","PRODUCT_DETAILS_SUCCESS","PRODUCT_LIST_FAIL","PRODUCT_LIST_REQUEST","PRODUCT_LIST_SUCCESS","SET_DROPDOWN_VALUES","setCurrentSelectedValues","e","data","type","payload","value","listDevices","dispatch","get","err","message","listProducts","Axios","detailsProduct","productId","response"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,mBAA3B,EAAgDC,mBAAhD,EAAqEC,oBAArE,EAA2FC,uBAA3F,EAAoHC,uBAApH,EAA6IC,iBAA7I,EAAgKC,oBAAhK,EAAsLC,oBAAtL,EAA4MC,mBAA5M,QAAuO,+BAAvO;AAEA;AACA;;AACA,OAAO,MAAMC,wBAAwB,GAAG,CAACC,CAAD,EAAIC,IAAJ,KAAY;AAElD,SAAM;AAAEC,IAAAA,IAAI,EAAEJ,mBAAR;AAA6BK,IAAAA,OAAO,EAAEF,IAAI,CAACG;AAA3C,GAAN;AACD,CAHM;AAMP;;AAEA;;AACA,OAAO,MAAMC,WAAW,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAEnDA,EAAAA,QAAQ,CAAC;AAACJ,IAAAA,IAAI,EAAEZ;AAAP,GAAD,CAAR;;AAEA,MAAI;AAEF,UAAM;AAAEW,MAAAA;AAAF,QAAW,MAAMb,KAAK,CAACmB,GAAN,CAAU,iBAAV,CAAvB;AAEAD,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAEX,mBAAR;AAA6BY,MAAAA,OAAO,EAAEF;AAAtC,KAAD,CAAR;AAED,GAND,CAQA,OAAMO,GAAN,EAAW;AAETF,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAEb,gBAAR;AAA0Bc,MAAAA,OAAO,EAAEK,GAAG,CAACC;AAAvC,KAAD,CAAR;AAED;AAEF,CAlBM;AAoBP;;AACA,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAOJ,QAAP,IAAoB;AAElDA,EAAAA,QAAQ,CAAC;AAACJ,IAAAA,IAAI,EAAEN;AAAP,GAAD,CAAR;;AAEA,MAAI;AAEF,UAAM;AAAEK,MAAAA;AAAF,QAAW,MAAMU,KAAK,CAACJ,GAAN,CAAU,eAAV,CAAvB;AAEAD,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAEL,oBAAR;AAA8BM,MAAAA,OAAO,EAAEF;AAAvC,KAAD,CAAR;AAED,GAND,CAQA,OAAMO,GAAN,EAAW;AAETF,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAEP,iBAAR;AAA2BQ,MAAAA,OAAO,EAAEK,GAAG,CAACC;AAAxC,KAAD,CAAR;AAED;AAEF,CAlBI;AAqBL;;AACA,OAAO,MAAMG,cAAc,GAAIC,SAAD,IAAe,MAAOP,QAAP,IAAoB;AAG/DA,EAAAA,QAAQ,CAAC;AAAEJ,IAAAA,IAAI,EAAET,uBAAR;AAAiCU,IAAAA,OAAO,EAAEU;AAA1C,GAAD,CAAR;;AAEA,MAAI;AAEF,UAAM;AAAEZ,MAAAA;AAAF,QAAW,MAAMU,KAAK,CAACJ,GAAN,CAAW,iBAAgBM,SAAU,EAArC,CAAvB;AAEAP,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAER,uBAAR;AAAiCS,MAAAA,OAAO,EAAEF;AAA1C,KAAD,CAAR;AAED,GAND,CAOA,OAAMO,GAAN,EAAW;AAETF,IAAAA,QAAQ,CAAC;AAEPJ,MAAAA,IAAI,EAAEV,oBAFC;AAEoBW,MAAAA,OAAO;AAE9B;AACAK,MAAAA,GAAG,CAACM,QAAJ,IAAgBN,GAAG,CAACM,QAAJ,CAAab,IAAb,CAAkBQ;AAElC;AAFA,QAGED,GAAG,CAACM,QAAJ,CAAab,IAAb,CAAkBQ;AAEpB;AALA,QAMED,GAAG,CAACC;AAXH,KAAD,CAAR;AAaD;AACF,CA5BM","sourcesContent":["import axios from \"axios\";\nimport { DEVICE_LIST_FAIL, DEVICE_LIST_REQUEST, DEVICE_LIST_SUCCESS, PRODUCT_DETAILS_FAIL, PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_LIST_FAIL, PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS, SET_DROPDOWN_VALUES } from \"../constants/ProductConstants\"\n\n/* Actions */\n// this action sets the current selectct values\nexport const setCurrentSelectedValues = (e, data) =>{\n\n  return{ type: SET_DROPDOWN_VALUES, payload: data.value}\n}\n\n\n/* get user slectable devices for drop down */\n\n/* get user slectable devices for drop down */\nexport const listDevices = () => async (dispatch) => {\n\n  dispatch({type: DEVICE_LIST_REQUEST,});\n\n  try {\n\n    const { data } = await axios.get('/api/deviceType');\n\n    dispatch({ type: DEVICE_LIST_SUCCESS, payload: data });\n\n  } \n  \n  catch(err) {\n\n    dispatch({ type: DEVICE_LIST_FAIL, payload: err.message });\n\n  }\n\n};\n\n/* list products from backend */\nexport const listProducts = () => async (dispatch) => {\n\n    dispatch({type: PRODUCT_LIST_REQUEST,});\n\n    try {\n\n      const { data } = await Axios.get('/api/products');\n\n      dispatch({ type: PRODUCT_LIST_SUCCESS, payload: data });\n\n    } \n    \n    catch(err) {\n\n      dispatch({ type: PRODUCT_LIST_FAIL, payload: err.message });\n\n    }\n\n  };\n  \n\n  /* get product details from backend */\n  export const detailsProduct = (productId) => async (dispatch) => {\n\n\n    dispatch({ type: PRODUCT_DETAILS_REQUEST, payload: productId });\n\n    try {\n\n      const { data } = await Axios.get(`/api/products/${productId}`);\n\n      dispatch({ type: PRODUCT_DETAILS_SUCCESS, payload: data });\n\n    } \n    catch(err) {\n\n      dispatch({\n\n        type: PRODUCT_DETAILS_FAIL,payload: \n\n            /*  backend failure */\n            err.response && err.response.data.message\n          \n            /* render the error message from backend */\n            ? err.response.data.message\n\n            /* otherwise, diplay the generic error message */\n            : err.message,\n      });\n    }\n  };"]},"metadata":{},"sourceType":"module"}