{"ast":null,"code":"// import data from \"./data\";\nimport { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { cartReducer } from './reducers/CartReducers';\nimport { productDetailsReducer, productListReducer } from './reducers/ProductReducers';\nconst initialState = {\n  cart: {\n    /* check to see if items are existing in cart, if so, convert to array for processing */\n    cartItems: localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : []\n  }\n};\n/* Get data through reducers dynamically - so we dont rely on static content */\n\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  // selectDevice: deviceDropdownReducer,\n  cart: cartReducer,\n  connected: SelectionCo,\n  options: optionsReducer,\n  selectedValues: selectedValuesReducer\n});\n/* allow chrome browser redux tools access to store */\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducer, initialState, composeEnhancer(applyMiddleware(thunk)));\nexport default store;","map":{"version":3,"sources":["/Users/smoke/AndroidStudioProjects/New_Project/EZTechWebsite/frontend/src/store.js"],"names":["applyMiddleware","combineReducers","compose","createStore","thunk","cartReducer","productDetailsReducer","productListReducer","initialState","cart","cartItems","localStorage","getItem","JSON","parse","reducer","productList","productDetails","connected","SelectionCo","options","optionsReducer","selectedValues","selectedValuesReducer","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store"],"mappings":"AACA;AACA,SAAQA,eAAR,EAAyBC,eAAzB,EAA0CC,OAA1C,EAAmDC,WAAnD,QAAqE,OAArE;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,qBAAT,EAAgCC,kBAAhC,QAA0D,4BAA1D;AAEA,MAAMC,YAAY,GAAG;AAEjBC,EAAAA,IAAI,EAAE;AAEF;AACAC,IAAAA,SAAS,EAAEC,YAAY,CAACC,OAAb,CAAqB,WAArB,IAAmCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAAnC,GAAiF;AAH1F;AAFW,CAArB;AAUA;;AACA,MAAMG,OAAO,GAAGd,eAAe,CAAC;AAE5Be,EAAAA,WAAW,EAAET,kBAFe;AAG5BU,EAAAA,cAAc,EAAEX,qBAHY;AAI5B;AACAG,EAAAA,IAAI,EAAEJ,WALsB;AAM5Ba,EAAAA,SAAS,EAAEC,WANiB;AAO5BC,EAAAA,OAAO,EAAEC,cAPmB;AAQ5BC,EAAAA,cAAc,EAAEC;AARY,CAAD,CAA/B;AAYA;;AACA,MAAMC,eAAe,GAAGC,MAAM,CAACC,oCAAP,IAA+CxB,OAAvE;AAEA,MAAMyB,KAAK,GAAGxB,WAAW,CAACY,OAAD,EAAUP,YAAV,EAAwBgB,eAAe,CAACxB,eAAe,CAACI,KAAD,CAAhB,CAAvC,CAAzB;AAEA,eAAeuB,KAAf","sourcesContent":["\n// import data from \"./data\";\nimport {applyMiddleware, combineReducers, compose, createStore} from 'redux';\nimport thunk from 'redux-thunk';\nimport { cartReducer } from './reducers/CartReducers';\nimport { productDetailsReducer, productListReducer } from './reducers/ProductReducers';\n\nconst initialState = {\n\n    cart: {\n\n        /* check to see if items are existing in cart, if so, convert to array for processing */\n        cartItems: localStorage.getItem('cartItems')? JSON.parse(localStorage.getItem('cartItems')):[],\n    }\n\n};\n\n/* Get data through reducers dynamically - so we dont rely on static content */\nconst reducer = combineReducers({\n\n    productList: productListReducer,\n    productDetails: productDetailsReducer,\n    // selectDevice: deviceDropdownReducer,\n    cart: cartReducer,\n    connected: SelectionCo,\n    options: optionsReducer,\n    selectedValues: selectedValuesReducer\n\n});\n\n/* allow chrome browser redux tools access to store */\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducer, initialState, composeEnhancer(applyMiddleware(thunk)));\n\nexport default store;\n\n\n"]},"metadata":{},"sourceType":"module"}